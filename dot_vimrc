""""""""""""""""
" vim 環境構築
""""""""""""""""

" Digi-Angler
" Update:2021/04/28

""""""""""""""""
" 設定
""""""""""""""""

" init autocmd
autocmd!

scriptencoding utf-8                                    " set script encoding
if !1 | finish | endif                                  " stop loading config if it's on tiny or small
set shell=fish                                          "
set backupskip=/tmp/*,/private/tmp/*                    "
set fenc=utf-8                                          " 文字コードを UFT-8 に変更
set nobackup                                            " バックアップファイルを作らない
set noswapfile                                          " スワップファイルを作らない
set nowritebackup                                       " ファイルの上書きの前にバックアップを作る
set autoindent                                          " 改行時に前の行のインデントを継続する
set autoread                                            " 編集中のファイルが変更されたら自動で読み直す
set clipboard&                                          " クリップボードにコピーする
set clipboard=unnamedplus                               "
set hidden                                              " バッファが編集中でもその他のファイルを開けるように
set showcmd                                             " 入力中のコマンドをステータスに表示する


"" 見た目系

set number                                              " 行番号を表示
set cursorline                                          " 現在の行を強調表示
set cursorcolumn                                        " 現在の行を強調表示（縦）
set virtualedit=onemore                                 " 行末の1文字先までカーソルを移動できるように
set smartindent                                         " インデントはスマートインデント
set visualbell                                          " ビープ音を可視化
set showmatch                                           " 括弧入力時の対応する括弧を表
set cmdheight=1                                         "
set laststatus=2                                        " ステータスラインを常に表示
set scrolloff=10                                        "
set wildmode=list:longest                               " コマンドラインの補完

" 折り返し時に表示行単位での移動できるようにする
nnoremap j gj
nnoremap k gk
nnoremap <Space>w :w!<CR>

" シンタックスハイライトの有効化
syntax enable

set encoding=utf-8
set fileencodings=iso-2022-jp,utf-8,sjis,euc-jp,latin
set fileformats=unix,dos,mac
set title                                               " タイトルを表示
set autoindent
set background=dark
set termguicolors


"" オペレーション系

set whichwrap=b,s,h,l,<,>,[,],~                         " 行をまたいで移動
set mouse=a                                             " マウスカーソルの反応
set history=10000                                       " コマンドラインの履歴を 10000 件保存する


"" Tab 系

set list listchars=tab:\▸\-                             " 不可視文字を可視化（タブが「▸-」と表示される）
set expandtab                                           " Tab 文字を半角スペースにする
set tabstop=2                                           " 行頭以外の Tab 文字の表示幅（スペースいくつ分）
set shiftwidth=2                                        " 行頭での Tab 文字の表示幅
set softtabstop=2                                       " 連続した空白に対してタブキーやバックスペースキーでカーソルが動く幅
" 
nmap <C-t>n :tabnew<CR>
nmap <C-t>N :tabNext<CR>
nmap <C-t>p :tabprevious<CR>

inoremap <silent> jj <ESC>
inoremap <silent> jjw <ESC>:w!<CR>
inoremap <silent> jjq <ESC>:wq!<CR>


"" 検索系

set ignorecase                                          " 検索文字列が小文字の場合は大文字小文字を区別なく検索する
set smartcase                                           " 検索文字列に大文字が含まれている場合は区別して検索する
set incsearch                                           " 検索文字列入力時に順次対象文字列にヒットさせる
set wrapscan                                            " 検索時に最後まで行ったら最初に戻る
set hlsearch                                            " 検索語をハイライト表示

" ESC連打でハイライト解除
nmap <Esc><Esc> :nohlsearch<CR><Esc>


" Clear highlight
map <C-n> :noh<CR>

" Split window
nmap <C-w>s :split<CR>
nmap <C-w>v :vsplit<CR>

" Move window
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l
nmap <C-h> <C-w>h



""""""""""""""""
" プラグイン管理
""""""""""""""""

"" dein.vim

if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=/Users/digi-angler/.cache/dein/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state('/Users/digi-angler/.cache/dein')
  call dein#begin('/Users/digi-angler/.cache/dein')

  " Let dein manage dein
  " Required:
  call dein#add('/Users/digi-angler/.cache/dein/repos/github.com/Shougo/dein.vim')

  " Add or remove your plugins here like this:
  call dein#add('dracula/vim')
  call dein#add('Shougo/neosnippet.vim')
  call dein#add('Shougo/neosnippet-snippets')
  call dein#add('Shougo/deol.nvim', { 'rev': '01203d4c9' })
  call dein#add('mattn/emmet-vim')
  call dein#add('thinca/vim-quickrun')
  call dein#add('tpope/vim-surround')
  call dein#add('preservim/nerdtree')
  call dein#add('preservim/nerdcommenter')
  call dein#add('tpope/vim-commentary')
  call dein#add('itchyny/lightline.vim')
  call dein#add('vim-airline/vim-airline')
  call dein#add('lifepillar/pgsql.vim')
  call dein#add('ap/vim-css-color')
  call dein#add('rafi/awesome-vim-colorschemes')
  call dein#add('wadackel/vim-dogrun')
  call dein#add('whatyouhide/vim-gotham')
  call dein#add('neoclide/coc.nvim')
  call dein#add('ryanoasis/vim-devicons')
  call dein#add('tc50cal/vim-terminal')
  call dein#add('preservim/tagbar')
  call dein#add('terryma/vim-multiple-cursors')
  call dein#add('tpope/vim-fugitive')
  call dein#add('evanleck/vim-svelte')
  call dein#add('pangloss/vim-javascript')
  call dein#add('HerringtonDarkholme/yats.vim')
  call dein#add('cespare/vim-toml')
  call dein#add('posva/vim-vue')
  call dein#add('wavded/vim-stylus')
  call dein#add('vim-airline/vim-airline-themes')
  call dein#add('Shougo/defx.nvim')
  call dein#add('Shougo/denite.nvim')
  call dein#add('Shougo/deoplete.nvim')
  if !has('nvim')
    call dein#add('roxma/nvim-yarp')
    call dein#add('roxma/vim-hug-neovim-rpc')
  endif
  call dein#add('kristijanhusak/defx-git')
  call dein#add('asvetliakov/vim-easymotion')

  " Required:
  call dein#end()
  call dein#save_state()
endif

" Required:
filetype plugin indent on
syntax enable

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif



""""""""""""""""
" プラグイン設定
""""""""""""""""

"" colorscheme

"colorscheme dogrun
"colorscheme gotham256
colorscheme cyberpunk-neon
let g:gotham_airline_emphasised_insert = 0


"" vim-clap theme

"let g:clap_theme = 'dogrun'
"let g:clap_theme = 'gotham256'
let g:clap_theme = "cyberpunk-neon"


"" emmet.vim

let g:user_emmet_settings = {
\ 'variables' : {
\  'lang' : "ja"
\ }
\}


"" nerdtree

nnoremap <silent> <Leader>e :<C-u>NERDTreeToggle<CR>

" 表示幅
let g:NERDTreeWinSize=50

" ブックマークを表示
let g:NERDTreeShowBookmarks=1

" 親ディレクトリへ移動
let g:NERDTreeMapUpdir='<C-u>'

" ファイルの開き方
let g:NERDTreeMapOpenSplit='<C-j>'
let g:NERDTreeMapOpenVSplit='<C-l>'

" ファイルを開いたらNERDTreeを閉じる
let g:NERDTreeQuitOnOpen=1

" 隠しファイルを表示
let g:NERDTreeShowHidden=1

" 非表示ファイル
let g:NERDTreeIgnore=['\.git$', '\.clean$', '\.swp$', '\.bak$', '\~$']

" Vim PostgreSQL syntax plugin
let g:sql_type_default = 'pgsql'


augroup vimrc_nerdtree
  autocmd!
  " 他のバッファをすべて閉じた時にNERDTreeが開いていたらNERDTreeも一緒に閉じる
  autocmd bufenter * if (winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree()) | q | endif

  " Tree内では5ずつ移動する
  autocmd FileType nerdtree nnoremap 5j
  autocmd FileType nerdtree nnoremap 5k
augroup END


"" lightline.vim

let g:lightline = {
  \ 'colorscheme': 'gotham256',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \     [ 'fugitive', 'readonly', 'filename', 'modified' ],
  \     [ 'ale' ] ]
  \ },
  \ 'component': {
  \   'readonly': '%{&filetype=="help"?"":&readonly?"ro":""}',
  \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
  \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
  \ },
  \ 'component_visible_condition': {
  \   'readonly': '(&filetype!="help"&& &readonly)',
  \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
  \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
  \ },
  \ 'component_function': {
  \   'ale': 'LinterStatus'
  \ }
  \ }


"" air-line

let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif


"" airline symbols

let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''


"" fzf.vim

set rtp+=/usr/local/opt/fzf
  let g:fzf_buffers_jump = 1
  nnoremap <silent> <Leader>ff :<C-u>Ag<CR>
  nnoremap <silent> <Leader>fh :<C-u>History<CR>
  nnoremap <silent> <Leader>ft :<C-u>call fzf#vim#tags(expand('<cword>'))<CR>
  nnoremap <silent> <Leader>fb :<C-u>Buffers<CR>
  nnoremap <silent> <Leader>fgs :<C-u>GFiles?<CR>
  nnoremap <silent> <Leader>fgf :<C-u>GFiles<CR>
  nnoremap <silent> <Leader>fm :<C-u>Marks<CR>
  let g:fzf_layout = { 'down': '30%' }
  let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-j': 'split',
    \ 'ctrl-l': 'vsplit' }

  augroup vimrc_fzf
      autocmd!
      autocmd FileType fzf tnoremap <buffer> <leader>z <Esc>
  augroup END


"" deoplete.nvim（neovim 専用）

if has('nvim')
  let g:deoplete#enable_at_startup = 1
endif
